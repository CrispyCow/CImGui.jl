using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcimgui"], :libcimgui),
    LibraryProduct(prefix, ["libcimgui_helper"], :libcimgui_helper),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/Gnimuc/CImGuiBuilder/releases/download/v1.68.0-2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/CImGui.v1.68.0.aarch64-linux-gnu.tar.gz", "611479723f4f56247962d3b2163871ae80040f7964c4b0fa9c907335aa5c05e0"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/CImGui.v1.68.0.aarch64-linux-musl.tar.gz", "4b1b0c8c7dbee8cae476471f5826500f6a2dbf699f6ece83c5bc537e982d3f3a"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/CImGui.v1.68.0.arm-linux-gnueabihf.tar.gz", "86165f1e6d73aadd7943a5283f64da5b0ee127c52122ad881e4b48f2fe4f64bd"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/CImGui.v1.68.0.arm-linux-musleabihf.tar.gz", "e5ee82b5707041ac78e3ecc0bc641ec777f3a78b170bd02000bc33bda96b85d1"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/CImGui.v1.68.0.i686-linux-gnu.tar.gz", "b428c68a7fcb0ce175ec758f9a5e0614798ded5d8adecdfa4a00573609d51023"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/CImGui.v1.68.0.i686-linux-musl.tar.gz", "bb2dc3f6b8a05b378efc4a3fd3e7c6094691863d28e1745fafbc4258bed28452"),
    Windows(:i686) => ("$bin_prefix/CImGui.v1.68.0.i686-w64-mingw32.tar.gz", "df863549ed52aaac7077c317288e622e2fec0baed1a67efabbaf5bf23b24de64"),
    MacOS(:x86_64) => ("$bin_prefix/CImGui.v1.68.0.x86_64-apple-darwin14.tar.gz", "4e946d7c30c2701f2ca83e3f64d4aafb2e84ab9cdcc106963d7ac051d97aca52"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/CImGui.v1.68.0.x86_64-linux-gnu.tar.gz", "7750e1884769737f8af6e2c2df0da15d37853173d07af60072750a0d397c9bcc"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/CImGui.v1.68.0.x86_64-linux-musl.tar.gz", "1f5ad7faadfc69cbcdd1ae3c7458a3eda8bbccdf0f3d1f187f11bd74e11ca471"),
    FreeBSD(:x86_64) => ("$bin_prefix/CImGui.v1.68.0.x86_64-unknown-freebsd11.1.tar.gz", "4029f0d0a614cb1c53522fcf54a9b1bcd38ea2b03cbdd5849208921a0c2460c0"),
    Windows(:x86_64) => ("$bin_prefix/CImGui.v1.68.0.x86_64-w64-mingw32.tar.gz", "d53a50152eeed34aa15f8a68e582de5d9662cf2c3801e1ee0fa425694c85d2e4"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
